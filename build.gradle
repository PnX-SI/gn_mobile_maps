// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.klint_version = '11.3.1'
    ext.kotlin_version = '1.8.0'
    ext.tinylog_version = '2.4.1'

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'org.jlleitschuh.gradle.ktlint' version "$klint_version"
    id 'org.jlleitschuh.gradle.ktlint-idea' version "$klint_version"
}
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

private File loadVersionPropertiesFile(String moduleName) {
    def versionPropsFile = file("$moduleName/version.properties")

    println "reading '${versionPropsFile.name}' for module '$moduleName' ..."

    if (!versionPropsFile.exists()) {
        versionPropsFile.createNewFile()
    }

    return versionPropsFile
}

@SuppressWarnings("unused")
int updateVersionCode(moduleName) {
    File propertiesFile = loadVersionPropertiesFile(moduleName)

    Properties versionProperties = new Properties()
    versionProperties.load(new FileInputStream(propertiesFile))

    int versionCode = Integer.parseInt(versionProperties.getProperty('VERSION_CODE', '0').toString()).intValue() + 1

    versionProperties['VERSION_CODE'] = versionCode.toString()
    versionProperties.store(propertiesFile.newWriter(), null)

    println "version code: $versionCode"

    return versionCode
}

@SuppressWarnings("unused")
def readKeystoreProperties(moduleName) {
    def propertiesFile = rootProject.file('keystore.properties')
    def configName = 'release'

    println "reading '${propertiesFile.absolutePath}' for module '$moduleName' ..."

    Project moduleProject = project.project(moduleName)

    if (propertiesFile.exists() && moduleProject.hasProperty("android") && moduleProject.android.signingConfigs.hasProperty(configName)) {
        def props = new Properties()
        props.load(new FileInputStream(propertiesFile))

        moduleProject.android.signingConfigs[configName].storeFile = file(props['STORE_FILE'])
        moduleProject.android.signingConfigs[configName].storePassword = props['STORE_PASSWORD']
        moduleProject.android.signingConfigs[configName].keyAlias = props['KEY_ALIAS']
        moduleProject.android.signingConfigs[configName].keyPassword = props['KEY_PASSWORD']

        println 'done'
    }
}
